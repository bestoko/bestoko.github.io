<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android Framework on Toko&#39;s blog</title>
    <link>https://bestoko.cc/tags/android-framework/</link>
    <description>Recent content in Android Framework on Toko&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Mar 2022 20:00:00 +0800</lastBuildDate><atom:link href="https://bestoko.cc/tags/android-framework/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Android平台架构学习笔记</title>
      <link>https://bestoko.cc/p/android-framework/</link>
      <pubDate>Thu, 03 Mar 2022 20:00:00 +0800</pubDate>
      
      <guid>https://bestoko.cc/p/android-framework/</guid>
      <description>平台架构  
https://developer.android.com/guide/platform?hl=zh-cn
从下到上依次分为：
 Linux内核层 硬件抽象层 HAL 系统运行库层 Java API 框架 系统应用  每一层都包含大量的子模块或子系统。
Linux内核层 (Linux Kernel)  Android 平台的基础是 Linux 内核。例如，Android Runtime (ART) 依靠 Linux 内核来执行底层功能，例如线程和低层内存管理。
使用 Linux 内核可让 Android 利用主要安全功能，并且允许设备制造商为著名的内核开发硬件驱动程序。
 Android平台以Linux内核为基础，避开了直接与硬件打交道，为驱动开发提供了高度扩展性和易用性，大大降低了 Android 系统移植工作的难度。
硬件抽象层 (Hardware Abstract Layer,HAL)  硬件抽象层 (HAL) 提供标准界面，向更高级别的 Java API 框架显示设备硬件功能。HAL 包含多个库模块，其中每个模块都为特定类型的硬件组件实现一个界面，例如相机或蓝牙模块。当框架 API 要求访问设备硬件时，Android 系统将为该硬件组件加载库模块。
 Linux内核层与HAL层共同实现了对硬件的支持。其中HAL层运行在用户空间(User Space)，而Linux内核驱动程序运行在内核空间(Kernel Space)。为什么不把它们整合起来放到内核空间呢？技术角度是可以实现的，然而商业角度上会损害硬件厂商的利益。Linux内核源代码版权遵循GNU License(发布产品时必须公布源代码)，而Android源代码版权遵循Apache License(发布产品时无须公布源代码)。
也就是说，Android放在内核空间的驱动程序对硬件的支持是不完整的，因此被踢出Linux内核主线代码树。
系统运行库层 这一层中包含了支撑整个系统正常运行的基础库，由系统类库和Android运行时组成。由于这些库多数由C/C++实现，因此也被一些开发人员称为“C库层”，以区别应用程序框架层。
原生 C/C++ 库 (Native C/C++ Libraries)  许多核心 Android 系统组件和服务(例如 ART 和 HAL)构建自原生代码，需要以 C 和 C++ 编写的原生库。Android 平台提供 Java 框架 API 以向应用显示其中部分原生库的功能。例如，您可以通过 Android 框架的 Java OpenGL API 访问 OpenGL ES，以支持在应用中绘制和操作 2D 和 3D 图形。</description>
    </item>
    
  </channel>
</rss>
