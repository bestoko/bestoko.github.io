<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Android on Toko&#39;s blog</title>
        <link>https://bestoko.cc/tags/android/</link>
        <description>Recent content in Android on Toko&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Wed, 15 Jun 2022 20:00:00 +0800</lastBuildDate><atom:link href="https://bestoko.cc/tags/android/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>MTK 平台 Camera HAL3 相关模块的代码路径</title>
        <link>https://bestoko.cc/p/mtkcamerahal3modules/</link>
        <pubDate>Wed, 15 Jun 2022 20:00:00 +0800</pubDate>
        
        <guid>https://bestoko.cc/p/mtkcamerahal3modules/</guid>
        <description>&lt;img src="https://bestoko.cc/p/mtkcamerahal3modules/HAL3.png" alt="Featured image of post MTK 平台 Camera HAL3 相关模块的代码路径" /&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Camera 相关模块&lt;/th&gt;
&lt;th&gt;代码路径&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CameraService&lt;/td&gt;
&lt;td&gt;frameworks/av/services/camera/libcameraservice/CameraService.cpp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CameraHALServer&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;mtkcam3&lt;/strong&gt;/main/hal/service/service.cpp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ICameraProvider&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;mtkcam&lt;/strong&gt;/main/hal/devicemgr/provider/2.4/CameraProviderImpl.cpp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ICameraDevice&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;mtkcam3&lt;/strong&gt;/main/hal/device/3.x/device/CameraDevice3Impl.cpp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ICameraDeviceSession&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;mtkcam3&lt;/strong&gt;/main/hal/device/3.x/device/CameraDevice3SessionImpl.cpp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CameraDeviceManager&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;mtkcam3&lt;/strong&gt;/main/hal/devicemgr/base/CameraDeviceManagerBase.cpp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AppStreamMgr&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;mtkcam3&lt;/strong&gt;/main/hal/device/3.x/app/AppStreamMgr.cpp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PipelineModel&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;mtkcam3&lt;/strong&gt;/pipeline/model/PipelineModelImpl.cpp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CameraSetting&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;mtkcam&lt;/strong&gt;/middleware/v3/pipeline/CameraSetting/CameraSettingMgr_Imp.cpp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MetadataProvider&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;mtkcam&lt;/strong&gt;/utils/metastore/metadataprovider/MetadataProvider.cpp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;StreamBuffer&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;mtkcam&lt;/strong&gt;/pipeline/utils/streambuf/StreamBuffers.cpp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hardware Node&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;mtkcam3&lt;/strong&gt;/pipeline/hwnode/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FeaturePipe&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;mtkcam3&lt;/strong&gt;/feature/core/featurePipe/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pipe Driver&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;mtkcam&lt;/strong&gt;/drv/src/isp/isp_6s/imageio/pipe&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sensor Driver&lt;/td&gt;
&lt;td&gt;&amp;lt;kernel-x.xx&amp;gt;/drivers/misc/mediatek/imgsensor/src/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EEPROM Driver&lt;/td&gt;
&lt;td&gt;&amp;lt;kernel-x.xx&amp;gt;/drivers/misc/eeprom/eeprom.c&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
        </item>
        <item>
        <title>Android平台架构学习笔记</title>
        <link>https://bestoko.cc/p/android-framework/</link>
        <pubDate>Thu, 03 Mar 2022 20:00:00 +0800</pubDate>
        
        <guid>https://bestoko.cc/p/android-framework/</guid>
        <description>&lt;img src="https://bestoko.cc/p/android-framework/android-logo.png" alt="Featured image of post Android平台架构学习笔记" /&gt;&lt;h2 id=&#34;平台架构&#34;&gt;平台架构&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://bestoko.cc/p/android-framework/android-stack_2x.png&#34;
	width=&#34;1384&#34;
	height=&#34;2038&#34;
	srcset=&#34;https://bestoko.cc/p/android-framework/android-stack_2x_huac466ffcfe902f478184f94c521211df_101554_480x0_resize_box_3.png 480w, https://bestoko.cc/p/android-framework/android-stack_2x_huac466ffcfe902f478184f94c521211df_101554_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;67&#34;
		data-flex-basis=&#34;162px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.android.com/guide/platform?hl=zh-cn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://developer.android.com/guide/platform?hl=zh-cn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从下到上依次分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux内核层&lt;/li&gt;
&lt;li&gt;硬件抽象层 HAL&lt;/li&gt;
&lt;li&gt;系统运行库层&lt;/li&gt;
&lt;li&gt;Java API 框架&lt;/li&gt;
&lt;li&gt;系统应用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每一层都包含大量的子模块或子系统。&lt;/p&gt;
&lt;h2 id=&#34;linux内核层-linux-kernel&#34;&gt;Linux内核层 (Linux Kernel)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Android 平台的基础是 Linux 内核。例如，&lt;a class=&#34;link&#34; href=&#34;https://developer.android.com/guide/platform?hl=zh-cn#art&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Android Runtime (ART)&lt;/a&gt; 依靠 Linux 内核来执行底层功能，例如线程和低层内存管理。&lt;/p&gt;
&lt;p&gt;使用 Linux 内核可让 Android 利用&lt;a class=&#34;link&#34; href=&#34;https://source.android.com/security/overview/kernel-security.html?hl=zh-cn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;主要安全功能&lt;/a&gt;，并且允许设备制造商为著名的内核开发硬件驱动程序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Android平台以Linux内核为基础，避开了直接与硬件打交道，为驱动开发提供了高度扩展性和易用性，大大降低了 Android 系统移植工作的难度。&lt;/p&gt;
&lt;h2 id=&#34;硬件抽象层-hardware-abstract-layerhal&#34;&gt;硬件抽象层 (Hardware Abstract Layer,HAL)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://source.android.com/devices/architecture/hal-types?hl=zh-cn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;硬件抽象层 (HAL)&lt;/a&gt; 提供标准界面，向更高级别的 &lt;a class=&#34;link&#34; href=&#34;https://developer.android.com/guide/platform?hl=zh-cn#api-framework&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java API 框架&lt;/a&gt;显示设备硬件功能。HAL 包含多个库模块，其中每个模块都为特定类型的硬件组件实现一个界面，例如&lt;a class=&#34;link&#34; href=&#34;https://source.android.com/devices/camera/index.html?hl=zh-cn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;相机&lt;/a&gt;或&lt;a class=&#34;link&#34; href=&#34;https://source.android.com/devices/bluetooth.html?hl=zh-cn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;蓝牙&lt;/a&gt;模块。当框架 API 要求访问设备硬件时，Android 系统将为该硬件组件加载库模块。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Linux内核层与HAL层共同实现了对硬件的支持。其中HAL层运行在用户空间(User Space)，而Linux内核驱动程序运行在内核空间(Kernel Space)。为什么不把它们整合起来放到内核空间呢？技术角度是可以实现的，然而商业角度上会损害硬件厂商的利益。Linux内核源代码版权遵循GNU License(发布产品时必须公布源代码)，而Android源代码版权遵循Apache License(发布产品时无须公布源代码)。&lt;/p&gt;
&lt;p&gt;也就是说，Android放在内核空间的驱动程序对硬件的支持是不完整的，因此被踢出Linux内核主线代码树。&lt;/p&gt;
&lt;h2 id=&#34;系统运行库层&#34;&gt;系统运行库层&lt;/h2&gt;
&lt;p&gt;这一层中包含了支撑整个系统正常运行的基础库，由系统类库和Android运行时组成。由于这些库多数由C/C++实现，因此也被一些开发人员称为“C库层”，以区别应用程序框架层。&lt;/p&gt;
&lt;h3 id=&#34;原生-cc-库-native-cc-libraries&#34;&gt;原生 C/C++ 库 (Native C/C++ Libraries)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;许多核心 Android 系统组件和服务(例如 ART 和 HAL)构建自原生代码，需要以 C 和 C++ 编写的原生库。Android 平台提供 Java 框架 API 以向应用显示其中部分原生库的功能。例如，您可以通过 Android 框架的 &lt;a class=&#34;link&#34; href=&#34;https://developer.android.com/reference/android/opengl/package-summary?hl=zh-cn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java OpenGL API&lt;/a&gt; 访问 &lt;a class=&#34;link&#34; href=&#34;https://developer.android.com/guide/topics/graphics/opengl?hl=zh-cn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;OpenGL ES&lt;/a&gt;，以支持在应用中绘制和操作 2D 和 3D 图形。&lt;/p&gt;
&lt;p&gt;如果开发的是需要 C 或 C++ 代码的应用，可以使用 &lt;a class=&#34;link&#34; href=&#34;https://developer.android.com/ndk?hl=zh-cn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Android NDK&lt;/a&gt; 直接从原生代码访问某些&lt;a class=&#34;link&#34; href=&#34;https://developer.android.com/ndk/guides/stable_apis?hl=zh-cn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;原生平台库&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;简介&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Webkit&lt;/td&gt;
&lt;td&gt;一个开源的Web浏览器引擎&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OpenMAX AL&lt;/td&gt;
&lt;td&gt;一个不需要授权、跨平台的软件抽象层，以C语言实现的软件接口，用来处理多媒体。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Libc&lt;/td&gt;
&lt;td&gt;Linux下的ANSI C的函数库&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Media Framework&lt;/td&gt;
&lt;td&gt;基于PacketVideo的OpenCORE的多媒体库，支持多种常见音视频格式的录制和播放&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OpenGL ES&lt;/td&gt;
&lt;td&gt;免授权费的，跨平台的，功能完善的2D和3D图形应用程序接口API，主要针对多种嵌入式系统专门设计&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;android运行时-android-runtime&#34;&gt;Android运行时 (Android Runtime)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;对于运行 Android 5.0(API 级别 21)或更高版本的设备，每个应用都在其自己的进程中运行，并且有其自己的 &lt;a class=&#34;link&#34; href=&#34;https://source.android.com/devices/tech/dalvik/index.html?hl=zh-cn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Android Runtime (ART)&lt;/a&gt; 实例。ART 编写为通过执行 DEX 文件在低内存设备上运行多个虚拟机，DEX 文件是一种专为 Android 设计的字节码格式，经过优化，使用的内存很少。编译工具链(例如 &lt;a class=&#34;link&#34; href=&#34;https://source.android.com/source/jack.html?hl=zh-cn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Jack&lt;/a&gt;)将 Java 源代码编译为 DEX 字节码，使其可在 Android 平台上运行。&lt;/p&gt;
&lt;p&gt;ART 的部分主要功能包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;预先 (AOT) 和即时 (JIT) 编译&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优化的垃圾回收 (GC)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 Android 9(API 级别 28)及更高版本的系统中，支持将应用软件包中的 &lt;a class=&#34;link&#34; href=&#34;https://developer.android.com/about/versions/pie/android-9.0?hl=zh-cn#art-aot-dex&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Dalvik Executable 格式 (DEX) 文件转换为更紧凑的机器代码&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更好的调试支持，包括专用采样分析器、详细的诊断异常和崩溃报告，并且能够设置观察点以监控特定字段&lt;/p&gt;
&lt;p&gt;在 Android 版本 5.0(API 级别 21)之前，Dalvik 是 Android Runtime。如果您的应用在 ART 上运行效果很好，那么它应该也可在 Dalvik 上运行，但&lt;a class=&#34;link&#34; href=&#34;https://developer.android.com/guide/practices/verifying-apps-art?hl=zh-cn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;反过来不一定&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Android 还包含一套核心运行时库，可提供 Java API 框架所使用的 Java 编程语言中的大部分功能，包括一些 &lt;a class=&#34;link&#34; href=&#34;https://developer.android.com/guide/platform/j8-jack?hl=zh-cn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Java 8 语言功能&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;java-api-框架-java-api--framework&#34;&gt;Java API 框架 (Java API  Framework)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;您可通过以 Java 语言编写的 API 使用 Android OS 的整个功能集。这些 API 形成创建 Android 应用所需的构建块，它们可简化核心模块化系统组件和服务的重复使用，包括以下组件和服务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;丰富、可扩展的&lt;a class=&#34;link&#34; href=&#34;https://developer.android.com/guide/topics/ui/overview?hl=zh-cn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;视图系统&lt;/a&gt;，可用以构建应用的 UI，包括列表、网格、文本框、按钮甚至可嵌入的网络浏览器&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.android.com/guide/topics/resources/overview?hl=zh-cn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;资源管理器&lt;/a&gt;，用于访问非代码资源，例如本地化的字符串、图形和布局文件&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.android.com/guide/topics/ui/notifiers/notifications?hl=zh-cn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;通知管理器&lt;/a&gt;，可让所有应用在状态栏中显示自定义提醒&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.android.com/guide/components/activities?hl=zh-cn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Activity 管理器&lt;/a&gt;，用于管理应用的生命周期，提供常见的&lt;a class=&#34;link&#34; href=&#34;https://developer.android.com/guide/components/tasks-and-back-stack?hl=zh-cn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;导航返回栈&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.android.com/guide/topics/providers/content-providers?hl=zh-cn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;内容提供程序&lt;/a&gt;，可让应用访问其他应用(例如“联系人”应用)中的数据或者共享其自己的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;开发者可以完全访问 Android 系统应用使用的&lt;a class=&#34;link&#34; href=&#34;https://developer.android.com/reference/packages?hl=zh-cn&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;框架 API&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;与&amp;quot;C库层&amp;quot;对应，这一层往往被称作“Java库层”。一方面为上层应用层提供API接口，另一方面也是不少系统级服务进程的实现，是与Android应用开发者关系最直接的一层。提供了开发Android应用程序所需的一系列类库，高度封装直接调用。应用框架层的主要实现代码在frameworks/base和frameworks/av目录下。&lt;/p&gt;
&lt;h2 id=&#34;系统应用-system-apps&#34;&gt;系统应用 (System Apps)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Android  随附一套用于电子邮件、短信、日历、互联网浏览和联系人等的核心应用。平台随附的应用与用户可以选择安装的应用一样，没有特殊状态。因此第三方应用可成为用户的默认网络浏览器、短信 Messenger 甚至默认键盘(有一些例外，例如系统的“设置”应用)。&lt;/p&gt;
&lt;p&gt;系统应用可用作用户的应用，以及提供开发者可从其自己的应用访问的主要功能。例如，如果您的应用要发短信，您无需自己构建该功能，可以改为调用已安装的短信应用向您指定的接收者发送消息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;源码根目录中的packages目录对应着系统应用，其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;apps 核心应用程序&lt;/li&gt;
&lt;li&gt;experimental 第三方应用程序&lt;/li&gt;
&lt;li&gt;inputmethods 输入法目录&lt;/li&gt;
&lt;li&gt;providers 内容提供者目录&lt;/li&gt;
&lt;li&gt;screensavers 屏幕保护&lt;/li&gt;
&lt;li&gt;services 通信服务&lt;/li&gt;
&lt;li&gt;wallpaper 墙纸&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>一加8的Android 11 折腾指南</title>
        <link>https://bestoko.cc/p/oneplus8/</link>
        <pubDate>Wed, 28 Oct 2020 09:00:01 +0800</pubDate>
        
        <guid>https://bestoko.cc/p/oneplus8/</guid>
        <description>&lt;img src="https://bestoko.cc/p/oneplus8/onepluslogo.jpg" alt="Featured image of post 一加8的Android 11 折腾指南" /&gt;&lt;h1 id=&#34;准备工作&#34;&gt;准备工作&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;解锁Bootloader且打开USB调试的一加8&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;氢OS Android11 Rom包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Payload Dumber&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;platform-tools&lt;/p&gt;
&lt;p&gt;打包下载： pan.baidu.com/s/1afSr1snXan4LoBLX9l0Urg 【pcge】&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;刷入magisk&#34;&gt;刷入Magisk&lt;/h1&gt;
&lt;h2 id=&#34;制作magisk_patchedimg&#34;&gt;制作magisk_patched.img&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将官方包内的&lt;code&gt;payload.bin&lt;/code&gt; 解压并放入Payload Dumber 的payload_input目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开&lt;code&gt;payload_dumper.exe&lt;/code&gt;（看到boot解压出来就可以关闭了）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开payload_output目录，将解压出的&lt;code&gt;boot.img&lt;/code&gt;复制到手机根目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载并安装Magisk最新版本 (&lt;a class=&#34;link&#34; href=&#34;https://github.com/topjohnwu/Magisk/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/topjohnwu/Magisk/releases&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;选择安装Magisk-选择并修补一个文件，选中放在根目录的&lt;code&gt;boot.img&lt;/code&gt; ，等待修补完成&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将手机download目录下的修补完成的&lt;code&gt;magisk_patched.img&lt;/code&gt;复制到电脑&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工具刷入mgisk_patchedimg&#34;&gt;工具刷入mgisk_patched.img&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将&lt;code&gt;mgisk_patched.img&lt;/code&gt;放入 platform-tools 目录下&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;打开CMD命令行.bat
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;adb reboot bootloader&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fastboot flash boot_a magisk_patched.img&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fastboot flash boot_b magisk_patched.img&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fastboot reboot&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;刷入edxposed&#34;&gt;刷入EdXposed&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;刷入&lt;code&gt;Riru - Core&lt;/code&gt;模块&lt;/li&gt;
&lt;li&gt;刷入&lt;code&gt;Riru - EdXposed(YAHFA)&lt;/code&gt; 或&lt;code&gt;Riru - EdXposed(SandHook)&lt;/code&gt;模块&lt;/li&gt;
&lt;li&gt;安装最新的&lt;code&gt;Edxposed Manager&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;总结与注意事项&#34;&gt;总结与注意事项&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;制作&lt;code&gt;mgisk_patched.img&lt;/code&gt;时要用最新的 v8.0.x版本，不能使用以往的v21.0版本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;刷写&lt;code&gt;mgisk_patched.img&lt;/code&gt;时 a/b分区都要&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果因刷入不兼容的模块导致无法开机，可以尝试&lt;/p&gt;
&lt;p&gt;卸载全部magisk模块&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;adb shell&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;magisk --remove-modules&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;adb reboot&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://bestoko.cc/p/oneplus8/op8info.jpg&#34;
	width=&#34;1080&#34;
	height=&#34;2400&#34;
	srcset=&#34;https://bestoko.cc/p/oneplus8/op8info_hu1c01ae072c94a0d32ccc62cece000b2e_282491_480x0_resize_q75_box.jpg 480w, https://bestoko.cc/p/oneplus8/op8info_hu1c01ae072c94a0d32ccc62cece000b2e_282491_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;op8info&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;45&#34;
		data-flex-basis=&#34;108px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bestoko.cc/p/oneplus8/op8magisk1.jpg&#34;
	width=&#34;1080&#34;
	height=&#34;2400&#34;
	srcset=&#34;https://bestoko.cc/p/oneplus8/op8magisk1_huf96fa585d120f8fcc00ce09fafa081cb_290591_480x0_resize_q75_box.jpg 480w, https://bestoko.cc/p/oneplus8/op8magisk1_huf96fa585d120f8fcc00ce09fafa081cb_290591_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;op8magisk1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;45&#34;
		data-flex-basis=&#34;108px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bestoko.cc/p/oneplus8/op8magisk2.jpg&#34;
	width=&#34;1080&#34;
	height=&#34;2400&#34;
	srcset=&#34;https://bestoko.cc/p/oneplus8/op8magisk2_hu1695acc54332592cfae6f846dc4612e5_360981_480x0_resize_q75_box.jpg 480w, https://bestoko.cc/p/oneplus8/op8magisk2_hu1695acc54332592cfae6f846dc4612e5_360981_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;op8magisk2&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;45&#34;
		data-flex-basis=&#34;108px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bestoko.cc/p/oneplus8/op8edxposed.jpg&#34;
	width=&#34;1080&#34;
	height=&#34;2400&#34;
	srcset=&#34;https://bestoko.cc/p/oneplus8/op8edxposed_hu4f177afd7fcb75c68f6ef56574580fc4_353521_480x0_resize_q75_box.jpg 480w, https://bestoko.cc/p/oneplus8/op8edxposed_hu4f177afd7fcb75c68f6ef56574580fc4_353521_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;op8edxposed&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;45&#34;
		data-flex-basis=&#34;108px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
