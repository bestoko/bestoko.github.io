<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Toko&#39;s blog</title>
    <link>https://bestoko.cc/tags/linux/</link>
    <description>Recent content in Linux on Toko&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 Dec 2021 09:18:46 +0800</lastBuildDate><atom:link href="https://bestoko.cc/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Gnome农历插件安装踩坑记录</title>
      <link>https://bestoko.cc/p/gnome-lunar-calendar/</link>
      <pubDate>Thu, 30 Dec 2021 09:18:46 +0800</pubDate>
      
      <guid>https://bestoko.cc/p/gnome-lunar-calendar/</guid>
      <description>在extensions.gnome.org上找到个农历扩展Lunar Calendar 农历，直接安装会因为缺少依赖报错，搜到的rpm包也无法正常安装，查了下需要手动编译安装lunar-date。
Fedora35 编译安装lunar-date github页给的安装指南如下
meson build --prefix /usr -Ddocs=true -Dintrospection=true -Dvapi=true -Dtests=true ninja -C build/ sudo ninja -C build install  meson是用Python语言开发的构建工具，编译需要Ninja（用C++实现）命令。
 所以首先
sudo dnf install meson ninja-build 接着运行指南上第一条指令，如果有依赖缺失会报错，但是提示的依赖名称不能直接用于dnf install,可以在command-not-found.com 查询所需安装指令。以我为例：
sudo dnf install vala gtk-doc 接着重新安装插件就可以正常启用了。
额外可选设置 默认情况下当系统语言为中文时扩展可以正常工作，但是像我一样习惯系统语言用英文的话，农历会以拼音形式标注出来（真的很难看），解决办法如下：
cp /usr/share/locale/zh_CN/LC_MESSAGES/lunar-date.mo /usr/share/locale/en_US/LC_MESSAGES/lunar-date.mo  效果展示</description>
    </item>
    
    <item>
      <title>Grub2主题美化踩坑记录</title>
      <link>https://bestoko.cc/p/fedora-grub2-theme/</link>
      <pubDate>Wed, 29 Dec 2021 18:56:18 +0800</pubDate>
      
      <guid>https://bestoko.cc/p/fedora-grub2-theme/</guid>
      <description>双系统用了一段时间后，开机黑洞洞的grub界面自然看着不爽 （虽然只有几秒）,于是想着去美化一下，其中遇到了点小坑，记录一下。使用的机器装了Windows11和Fedora35。
下载主题 首先下载好你想要的主题文件，我选择的是这个MacOS风格的MacOS Monterey inspired grub theme
 展示效果 
修改/etc/default/grub文件 首先，注释掉GRUB_TERMINAL_OUTPUT=”console”,接着设置好你的GRUB主题路径。
#GRUB_TERMINAL_OUTPUT=”console” GRUB_THEME=&amp;quot;/boot/grub2/montery-grub-theme/theme.txt&amp;quot;  此外这个文件里还有几个常用的设置 GRUB_TIMEOUT=5 可以设置超时时间，设置-1可以取消倒计时 GRUB_DEFAULT=saved saved：光标会默认选择上一个成功进入的启动项，也可以填入数字，以指定启动列表中第x项为启动项，x从0开始计数
 更新Grub2配置 如果跟我一样使用GPT分区，以UEFI启动方式的话，启动时读取的位置是/boot/efi/EFI/fedora/grub.cfg ，更新命令如下：
sudo grub2-mkconfig -o /boot/efi/EFI/fedora/grub.cfg 而如果是启动方式是Legacy的话，启动时读取的文件是/boot/grub2/grub.cfg，更新命令如下：
sudo grub2-mkconfig -o /boot/grub2/grub.cfg 接着reboot即可看到效果。</description>
    </item>
    
    <item>
      <title>Linux上VirtualBox启动时sbin/vboxconfig错误的解决办法</title>
      <link>https://bestoko.cc/p/linux-virtualbox-error/</link>
      <pubDate>Tue, 28 Dec 2021 11:21:20 +0800</pubDate>
      
      <guid>https://bestoko.cc/p/linux-virtualbox-error/</guid>
      <description>在 Arch Linux 上使用 Virtual Box 制作虚拟机，打开时却出了问题。
报错信息  Kernel driver not installed (rc=-1908)
  error 
VirtualBox Linux 内核驱动程序未加载或未正确设置。
解决办法 执行如下命令，重新安装vboxdrv模块
sudo modprobe vboxdrv 如果不起作用，检查下是否在BIOS/UEFI设置中禁用安全启动（Secure Boot），因为安全启动会阻止加载未签名的模块。</description>
    </item>
    
    <item>
      <title>Linux与Windows双系统时间不一致的解决方法</title>
      <link>https://bestoko.cc/p/linux-windows-time-conflict/</link>
      <pubDate>Mon, 27 Dec 2021 21:14:01 +0800</pubDate>
      
      <guid>https://bestoko.cc/p/linux-windows-time-conflict/</guid>
      <description>给常用的电脑加了块固态装了Arch linux，结果在切换双系统时出现两个系统时间不一致的现象，是我之前在Surface上单系统所没遇到的。
为什么时间不一致  这是因为BIOS硬件时间本身并没有时区概念，但Windows和Linux对Bios硬件时间与时区关系的理解不一样。Linux将BIOS硬件时间视为协调世界时（UTC），即不存在本地时区；而Windows则将BIOS硬件时间视为当地时间，带上了设置后的时区。Windows这样做，一是早期为了兼容MS-DOS/Windows 3.x，二是为了照顾大众，防止用户问为什么BIOS显示的时间和实际不一致。
中国大陆、中国香港、中国澳门、中国台湾、蒙古国、新加坡、马来西亚、菲律宾、西澳大利亚州的时间与UTC的时差均为+8，也就是UTC+8。
 推荐的解决办法 Windows 其实也能处理 UTC，需要修改注册表。建议让 Windows 使用 UTC，而非让 Linux 使用地方时。Windows 使用 UTC 后，请记得禁用 Windows 的时间同步功能，以防 Windows 错误设置硬件时间。
Linux 可以使用NTP服务来在线同步硬件时钟。
使用 regedit,新建如下 DWORD 值，并将其值设为十六进制的 1。
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\TimeZoneInformation\RealTimeIsUniversal 也可以用管理员权限启动命令行来完成：
reg add &amp;quot;HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\TimeZoneInformation&amp;quot; /v RealTimeIsUniversal /d 1 /t REG_DWORD /f 如果以上操作不起作用，并且你使用的是 Windows 64位系统，将 DWORD 修改为 QWORD。
参考：https://wiki.archlinux.org/index.php/System_time#UTC_in_Windows</description>
    </item>
    
    <item>
      <title>Arch Linux上借助Snaps安装MicroSoft To-Do(unofficial)</title>
      <link>https://bestoko.cc/p/snaps-mstodo/</link>
      <pubDate>Wed, 22 Dec 2021 01:15:01 +0800</pubDate>
      
      <guid>https://bestoko.cc/p/snaps-mstodo/</guid>
      <description>虽然我一直不觉得自己是软粉，但是不知不觉中M$家的产品越用越顺手了。
MicroSoft To-Do作为代办清单app来说，简洁实用，同步方便，而最近在适应Arch Linux的我，实在用不惯gnome桌面自带的ToDo，必须想办法换回去。
 Snaps安装与配置  snap是Canonical公司发布的全新的软件包管理方式，它类似一个容器拥有一个应用程序所有的文件和库，各个应用程序之间完全独立。所以使用snap包的好处就是它解决了应用程序之间的依赖问题，使应用程序之间更容易管理。但是由此带来的问题就是它占用更多的磁盘空间。
 也就是说，对于生态系统碎片化严重的Linux来说，Snaps像是它们的中间地带，不管运行哪种Linux分支，都能轻易通过Snaps获取想要的应用程序包。
安装Snap软件包 首先，赞美AUR，snapd及其依赖包snap-confine和squashfs-tools都在仓库里了。
sudo pacman -S snapd 启动守护进程 sudo systemctl enable --now snapd.socket 启用classic snap support sudo ln -s /var/lib/snapd/snap /snap 接着log out或者reboot一下来确保snap的路径正确更新。
 Strict
Used by the majority of snaps. Strictly confined snaps run in complete isolation, up to a minimal access level that’s deemed always safe. Consequently, strictly confined snaps can not access your files, network, processes or any other system resource without requesting specific access via an interface (see below).</description>
    </item>
    
    <item>
      <title>Arch Linux上修改Code-OSS扩展源</title>
      <link>https://bestoko.cc/p/code-oss-extensions/</link>
      <pubDate>Mon, 20 Dec 2021 09:00:01 +0800</pubDate>
      
      <guid>https://bestoko.cc/p/code-oss-extensions/</guid>
      <description> 类比于Chrome 浏览器和其开源的“上游”项目 Chromium。VS Code 确实是基于开源代码库构建的。而微软官方发布的版本带有一些与微软相关的功能，包括一项商标、一个插件库、一个 C# 调试器以及遥测。但如果你克隆仓库然后自行编译，这些东西都不会被加入，所以你会得到一个名为 Code - OSS 的“干净”版本（OSS，Open-source software ）。
 我之前使用
pacman -S code 所安装的正是Code-OSS ，默认不使用微软官方扩展市场。
方法一 我们可以通过修改/usr/lib/code/product.json解决这个问题，添加如下内容：
&amp;#34;extensionsGallery&amp;#34;: { &amp;#34;serviceUrl&amp;#34;: &amp;#34;https://marketplace.visualstudio.com/_apis/public/gallery&amp;#34;, &amp;#34;cacheUrl&amp;#34;: &amp;#34;https://vscode.blob.core.windows.net/gallery/index&amp;#34;, &amp;#34;itemUrl&amp;#34;: &amp;#34;https://marketplace.visualstudio.com/items&amp;#34; } 重新启动Code-OSS就可以了。
方法二 方法一正常使用一段时间后，在某次重启后出现打不开Code-OSS的情况，所幸从AUR上找到了另一个包解决了问题，记录在此。
yay -S code-marketplace </description>
    </item>
    
    <item>
      <title>Surface设备在Arch Linux下驱动问题的解决方案</title>
      <link>https://bestoko.cc/p/surface-linux/</link>
      <pubDate>Thu, 16 Dec 2021 01:48:01 +0800</pubDate>
      
      <guid>https://bestoko.cc/p/surface-linux/</guid>
      <description>写在前面 之前我已经在Surface Pro 上安装了Arch Linux，可是由简入奢易，由奢入艰难，习惯了的二合一设备突然不能正常触屏还是有些不爽（之前买的surface pen也成了摆设），于是我在github上找到了第三方内核。由于是第三方内核，各设备各硬件的适配情况并不完善，具体可以查看这里。
安装驱动 导入密钥 首先我们需要导入用于签名软件包的密钥：
$ curl -s https://raw.githubusercontent.com/linux-surface/linux-surface/master/pkg/keys/surface.asc \  | sudo pacman-key --add - 检查完整性并本地签名 $ sudo pacman-key --finger 56C464BAAC421453 $ sudo pacman-key --lsign-key 56C464BAAC421453 添加存储库 我们需要在/etc/pacman.conf添加如下内容
[linux-surface] Server = https://pkg.surfacelinux.com/arch/ 更新存储库数据，安装内核，启用服务 我们需要更新存储库数据，以安装linux-surface内核及其依赖项，接着启用iptsd服务以使用触摸屏。
$ sudo pacman -Syu $ sudo pacman -S linux-surface linux-surface-headers iptsd $ sudo systemctl enable iptsd 重启以后就完工了，屏幕触摸也支持了。</description>
    </item>
    
    <item>
      <title>Arch Linux安装备忘录（二）</title>
      <link>https://bestoko.cc/p/archinstallextra/</link>
      <pubDate>Wed, 15 Dec 2021 09:00:01 +0800</pubDate>
      
      <guid>https://bestoko.cc/p/archinstallextra/</guid>
      <description>写在前面 在安装了基本的ArchLinux后，我们还需要一些配置、安装一些组件，来扩展系统功能，使其更符合我们日常使用习惯。
配置网络 我们使用
nmtui 选择Edit a connection，
选择Add菜单，选择WI-FI，
Device 里输入 无线网卡的名字，SSID里输入WI-FI的名字，Security选择WPA &amp;amp;WPA2 Personal，OK-BACK-Quit退出。
注：使用以下命令查看无线网卡名称
ip link show 重命名主机 vim /etc/hostname 保存想要的名字后退出。
接下来把主机名、域名以及ip地址进行映射
vim /etc/hosts 输入：(以下archlinux为上文所保存的主机名)
127.0.0.1	localhost ::1	localhost 127.0.0.1 archlinux.localdomain	archlinux 设置系统时间 timedatectl set-timezone Asia/shanghai timedatectl set-ntp true 第二行设置为让本机时间与ntp同步。
配置环境变量 vim /etc/skel/.bashrc 添加以下内容
export EDITOR=vim alias grep=&amp;#39;grep ==color=auto&amp;#39; alias egrep=&amp;#39;egrep ==color=auto&amp;#39; alias fgrep=&amp;#39;fgrep ==color=auto&amp;#39; [ ！ -e ~/.dircolors ] &amp;amp;&amp;amp; eval $(dircolors -p &amp;gt; ~/.dircolors) [ ！ -e /bin/dircolors ] &amp;amp;&amp;amp; eval $(dircolors -b &amp;gt; ~/.</description>
    </item>
    
    <item>
      <title>Arch Linux安装备忘录（一）</title>
      <link>https://bestoko.cc/p/archinstall/</link>
      <pubDate>Tue, 14 Dec 2021 09:00:01 +0800</pubDate>
      
      <guid>https://bestoko.cc/p/archinstall/</guid>
      <description>写在前面 安装Arch最好最全面的教程就是官方的 Installation guide。但是Wiki上的介绍更偏向文档，而不是新手习惯的那种按步骤编排的教程，加上中文Wiki的翻译往往落后于英文版，缺乏预备Linux知识的新手经常无从下手。
笔者也是初学者，本篇文章仅作为自己在Surface Pro 2017从0开始安装配置Arch的记录。
安装准备 磁盘准备 我们需要准备一块有空闲区域（没有被分区）的磁盘留给系统的安装。笔者只准备安装Arch单系统，因此在PE里用磁盘管理工具把Surface的磁盘0各个分区全部删除。你也可以在Windows下找到磁盘管理，自行划分一个区域留给安装使用。
安装介质 https://www.archlinux.org/download/ 建议从下面的中国镜像下载iso文件
https://rufus.ie/ 我们用Rufus来制作引导盘，此步需要用到一个空闲U盘。需要注意的是写入方式选择DD，分区类型选择GPT而非默认的MBR。
设置启动顺序 接下来需要进入个人电脑的BIOS里把制作的U盘启动设置为第一位，笔者的Surface额外需要先关闭security boot，不同电脑进入BIOS的按键略有不同，Surface是开机键和音量+键，其他型号电脑请查阅搜索引擎。
安装过程 正确设置好启动顺序后，启动时会看到ArchLinux的界面，按Enter键选择 Boot Arch Linux ，等待加载完成后会进入一个有命令提示符的界面。我们接下来将在这个界面执行一系列命令来讲Arch安装到之前准备的磁盘上。
*网络连接 Arch的安装需要联网，如果你使用的是有线连接，可以跳过此部分，笔者这里使用无线连接继续安装。
输入
iwctl 进入iwd模式，输入
device list 查看你的网卡名字，这里假设是wlan0，输入
station wlan0 scan 检查扫描网络，输入
station wlan0 get-networks 查看网络名字，假设名字叫XXX，输入
station wlan0 connect XXX 接着输入密码（如果有密码的话），输入
exit 退出iwd模式
我们可以用ping命令来检验下是否连接成功
ping -c 4 baidu.com 接下来我们需要让安装介质里的数据库保持与官方一致的最新版本，因此需要同步一下，在此之前，我们可以配置下最新的镜像来保证下载速度。
reflector --country China --age 24 --sort rate --portocol https --save /etc/pacman.d/mirrorlist  country 限定国家 age 24 限定下更新时间为24小时内的源 portocol https 选择https协议更安全  执行完毕后，可以用vim查看</description>
    </item>
    
  </channel>
</rss>
